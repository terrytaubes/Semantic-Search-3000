In machine learning, multi-label classification and the strongly related problem of multi-output classification are variants of the classification problem where multiple labels may be assigned to each instance. Multi-label classification is a generalization of multiclass classification, which is the single-label problem of categorizing instances into precisely one of more than two classes; in the multi-label problem there is no constraint on how many of the classes the instance can be assigned to.
Formally, multi-label classification is the problem of finding a model that maps inputs x to binary vectors y (assigning a value of 0 or 1 for each element (label) in y).


== Problem transformation methods ==
Several problem transformation methods exist for multi-label classification; the baseline approach, called the binary relevance method, amounts to independently training one binary classifier for each label. Given an unseen sample, the combined model then predicts all labels for this sample for which the respective classifiers predict a positive result. This method of dividing the task into multiple binary tasks has something in common with the one-vs.-all (OvA, or one-vs.-rest, OvR) method for multiclass classification. Note though that it is not the same method: in binary relevance we train one classifier for each label, not one classifier for each possible value for the label.
Various other transformations exist. Of these, the label powerset (LP) transformation creates one binary classifier for every label combination attested in the training set. The random k-labelsets (RAKEL) algorithm uses multiple LP classifiers, each trained on a random subset of the actual labels; prediction using this ensemble method proceeds by a voting scheme.
Classifier chains are an alternative ensembling methods  that have been applied, for instance, in HIV drug resistance prediction.


== Adapted algorithms for multi-label classification ==
Some classification algorithms/models have been adaptated to the multi-label task, without requiring problem transformations. Examples of these include:
boosting: AdaBoost.MH and AdaBoost.MR are extended versions of AdaBoost for multi-label data.
k-nearest neighbors: the ML-kNN algorithm extends the k-NN classifier to multi-label data.
decision trees: "Clare" is an adapted C4.5 algorithm for multi-label classification; the modification involves the entropy calculations. MMC, MMDT, and SSC refined MMDT, can classify multi-labeled data based on multi-valued attributes without transforming the attributes into single-values. They are also named multi-valued and multi-labeled decision tree classification methods.
kernel methods for vector output
neural networks: BP-MLL is an adaptation of the popular back-propagation algorithm for multi-label learning.


== Learning paradigms ==
Based on learning paradigms, the existing multi-label classification techniques can be classified into batch learning and online machine learning. Batch learning algorithms require all the data samples to be available beforehand. It trains the model using the entire training data and then predicts the test sample using the found relationship. The online learning algorithms, on the other hand, incrementally build their models in sequential iterations. In iteration t, an online algorithm receives a sample, xt and predicts its label(s) ŷt using the current model; the algorithm then receives yt, the true label(s) of xt and updates its model based on the sample-label pair: (xt, yt). Recently, a new learning paradigm called the progressive learning technique has been developed. The progressive learning technique is capable of not only learning from new samples but also capable of learning multiple new labels of data being introduced to the model and yet retain the knowledge learnt thus far.


== Statistics and evaluation metrics ==
The extent to which a dataset is multi-label can be captured in two statistics:
Label cardinality is the average number of labels per example in the set: 
  
    
      
        
          
            1
            N
          
        
        
          ∑
          
            i
            =
            1
          
          
            N
          
        
        
          |
        
        
          Y
          
            i
          
        
        
          |
        
      
    
    {\displaystyle {\frac {1}{N}}\sum _{i=1}^{N}|Y_{i}|}
  ;
label density is the number of labels per sample divided by the total number of labels, averaged over the samples: 
  
    
      
        
          
            1
            N
          
        
        
          ∑
          
            i
            =
            1
          
          
            N
          
        
        
          
            
              
                |
              
              
                Y
                
                  i
                
              
              
                |
              
            
            
              
                |
              
              L
              
                |
              
            
          
        
      
    
    {\displaystyle {\frac {1}{N}}\sum _{i=1}^{N}{\frac {|Y_{i}|}{|L|}}}
   where 
  
    
      
        L
        =
        
          ⋃
          
            i
            =
            1
          
          
            N
          
        
        
          Y
          
            i
          
        
      
    
    {\displaystyle L=\bigcup _{i=1}^{N}Y_{i}}
  .
Evaluation metrics for multi-label classification performance are inherently different from those used in multi-class (or binary) classification, due to the inherent differences of the classification problem. If T denotes the true set of labels for a given sample, and P the predicted set of labels, then the following metrics can be defined on that sample:
Hamming loss: the fraction of the wrong labels to the total number of labels, i.e. 
  
    
      
        
          
            1
            
              
                |
              
              N
              
                |
              
              ⋅
              
                |
              
              L
              
                |
              
            
          
        
        
          ∑
          
            i
            =
            1
          
          
            
              |
            
            N
            
              |
            
          
        
        
          ∑
          
            j
            =
            1
          
          
            
              |
            
            L
            
              |
            
          
        
        xor
        ⁡
        (
        
          y
          
            i
            ,
            j
          
        
        ,
        
          z
          
            i
            ,
            j
          
        
        )
      
    
    {\displaystyle {\frac {1}{|N|\cdot |L|}}\sum _{i=1}^{|N|}\sum _{j=1}^{|L|}\operatorname {xor} (y_{i,j},z_{i,j})}
  , where 
  
    
      
        
          y
          
            i
            ,
            j
          
        
      
    
    {\displaystyle y_{i,j}}
   is the target and 
  
    
      
        
          z
          
            i
            ,
            j
          
        
      
    
    {\displaystyle z_{i,j}}
   is the prediction. This is a loss function, so the optimal value is zero.
The closely related Jaccard index, also called Intersection over Union in the multi-label setting, is defined as the number of correctly predicted labels divided by the union of predicted and true labels, 
  
    
      
        
          
            
              
                |
              
              T
              ∩
              P
              
                |
              
            
            
              
                |
              
              T
              ∪
              P
              
                |
              
            
          
        
      
    
    {\displaystyle {\frac {|T\cap P|}{|T\cup P|}}}
  
Precision, recall and 
  
    
      
        
          F
          
            1
          
        
      
    
    {\displaystyle F_{1}}
   score: precision is 
  
    
      
        
          
            
              
                |
              
              T
              ∩
              P
              
                |
              
            
            
              
                |
              
              P
              
                |
              
            
          
        
      
    
    {\displaystyle {\frac {|T\cap P|}{|P|}}}
  , recall is 
  
    
      
        
          
            
              
                |
              
              T
              ∩
              P
              
                |
              
            
            
              
                |
              
              T
              
                |
              
            
          
        
      
    
    {\displaystyle {\frac {|T\cap P|}{|T|}}}
  , and 
  
    
      
        
          F
          
            1
          
        
      
    
    {\displaystyle F_{1}}
   is their harmonic mean.
Exact match: is the most strict metric, indicating the percentage of samples that have all their labels classified correctly.
Cross-validation in multi-label settings is complicated by the fact that the ordinary (binary/multiclass) way of stratified sampling will not work; alternative ways of approximate stratified sampling have been suggested.


== Implementations and datasets ==
Java implementations of multi-label algorithms are available in the Mulan and Meka software packages, both based on Weka.
The scikit-learn Python package implements some multi-labels algorithms and metrics.
The binary relevance method, classifier chains and other multilabel algorithms with a lot of different base learners are implemented in the R-package mlr.
A list of commonly used multi-label data-sets is available at the Mulan website.


== See also ==
Multiclass classification
Multiple-instance learning
Structured prediction


== References ==


== Further reading ==
Madjarov, Gjorgji; Kocev, Dragi; Gjorgjevikj, Dejan; Džeroski, Sašo (2012). "An extensive experimental comparison of methods for multi-label learning". Pattern Recognition. 45 (9): 3084–3104. doi:10.1016/j.patcog.2012.03.004.